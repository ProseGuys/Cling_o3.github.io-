<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on 人间客</title><link>https://proseguys.github.io/blog/</link><description>Recent content in Blogs on 人间客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 15 Aug 2024 15:54:10 +0800</lastBuildDate><atom:link href="https://proseguys.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>PDF 格式化提取调研</title><link>https://proseguys.github.io/blog/pdf_extractor_report/</link><pubDate>Thu, 15 Aug 2024 15:54:10 +0800</pubDate><guid>https://proseguys.github.io/blog/pdf_extractor_report/</guid><description>&lt;p>在整理PDF 格式化内容提取方案时，发现当前网上所提及的库要么落后于时代版本要么就是各种文字描述语焉不详。因此根据调研结果重新整理&lt;/p>
&lt;h2 id="需求">需求：&lt;/h2>
&lt;p>提取PDF文件内容，如果PDF文件中数据之间包含段落关系，需保留其段落关系。&lt;/p>
&lt;h2 id="困难点">困难点：&lt;/h2>
&lt;p>由于PDF文件可以有多种来源生成，如html文件转换、markdown文件转换、文本影印等。部分来源文件天然不存在段落关系或者文字信息不清晰等，因此本文调研优先考虑由html和markdown等层级化文件转换成的PDF文件内容提取。&lt;/p>
&lt;h2 id="实验方案">实验方案：&lt;/h2>
&lt;p>使用由markdown文件生成的PDF文件进行内容提取，对比各自提取结构和结果&lt;/p>
&lt;p>测试文件：&lt;/p>
&lt;p>&lt;a href="https://proseguys.github.io/images/pdf_extractor_report/test.pdf">test.pdf&lt;/a>&lt;/p>
&lt;h2 id="调研对象">调研对象&lt;/h2>
&lt;ul>
&lt;li>pdfplumber&lt;/li>
&lt;li>pdfminer.six&lt;/li>
&lt;li>PyMuPDF&lt;/li>
&lt;li>pypdfium2&lt;/li>
&lt;li>marker&lt;/li>
&lt;li>MinerU&lt;/li>
&lt;/ul>
&lt;h3 id="pdfplumber">pdfplumber&lt;/h3>
&lt;p>**文档地址：**&lt;a href="https://github.com/jsvine/pdfplumber">https://github.com/jsvine/pdfplumber&lt;/a>&lt;/p>
&lt;p>**简介：**查看PDF文件以获取有关每个文本字符、矩形和线条的详细信息。并具有表格提取和可视化调试能力，基于pdfminer.six&lt;/p>
&lt;p>**测试结果：**根据PDF的单页作为内容操作的基本单位，只支持获取纯文本信息，根据段落结构获取方式不成熟，以下为测试结果&lt;/p>
&lt;ul>
&lt;li>直接文字提取&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pdfplumber
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">pdf_to_markdown&lt;/span>(pdf_path: str):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 使用 pdfplumber 打开 PDF 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> pdfplumber&lt;span style="color:#f92672">.&lt;/span>open(pdf_path) &lt;span style="color:#66d9ef">as&lt;/span> pdf:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> page &lt;span style="color:#f92672">in&lt;/span> pdf&lt;span style="color:#f92672">.&lt;/span>pages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 提取每页的 HTML 内容, &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context &lt;span style="color:#f92672">=&lt;/span> page&lt;span style="color:#f92672">.&lt;/span>extract_text()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(context)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pdf_to_markdown(&lt;span style="color:#e6db74">&amp;#34;pdf_test/test.pdf&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled.png" alt="Untitled">&lt;/p>
&lt;p>丢失文件段落结构，标题正文无法区分。&lt;/p>
&lt;ul>
&lt;li>段落结构获取(实验阶段)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pdfplumber
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">pdf_to_markdown&lt;/span>(pdf_path: str):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 使用 pdfplumber 打开 PDF 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> pdfplumber&lt;span style="color:#f92672">.&lt;/span>open(pdf_path) &lt;span style="color:#66d9ef">as&lt;/span> pdf:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> page &lt;span style="color:#f92672">in&lt;/span> pdf&lt;span style="color:#f92672">.&lt;/span>pages:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># 提取每页的 HTML 内容&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> context &lt;span style="color:#f92672">=&lt;/span> page&lt;span style="color:#f92672">.&lt;/span>extract_text(layout&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">True&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(context)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pdf_to_markdown(&lt;span style="color:#e6db74">&amp;#34;pdf_test/test.pdf&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%201.png" alt="Untitled">&lt;/p>
&lt;p>丢失标题结构，且增加对应换行符，增加后续解析难度&lt;/p>
&lt;h3 id="pdfminersix">&lt;strong>pdfminer.six&lt;/strong>&lt;/h3>
&lt;p>&lt;strong>文档地址：&lt;/strong> &lt;a href="https://pdfminersix.readthedocs.io/en/latest/">https://pdfminersix.readthedocs.io/en/latest/&lt;/a>&lt;/p>
&lt;p>&lt;strong>简介：&lt;/strong> Pdfminer.6 是社区维护的原始 PDFMiner 的分支。它是一个从PDF文档中提取信息的工具。它专注于获取和分析文本数据。 Pdfminer.6 直接从 PDF 源代码中提取页面文本。它还可用于获取文本的确切位置、字体或颜色。&lt;/p>
&lt;p>&lt;strong>测试结果：&lt;/strong> 通过&lt;code>extract_text&lt;/code> 方法直接获取整页PDF的文本信息，丢失文本层级结构&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> pdfminer.high_level &lt;span style="color:#f92672">import&lt;/span> extract_text
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">pdf_to_markdown&lt;/span>(pdf_path: str):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text &lt;span style="color:#f92672">=&lt;/span> extract_text(pdf_path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;./page.txt&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pdf_to_markdown(&lt;span style="color:#e6db74">&amp;#34;pdf_test/test.pdf&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%202.png" alt="Untitled">&lt;/p>
&lt;p>丢失部分PDF文档结构，丢失标题层级&lt;/p>
&lt;h3 id="pymupdf">PyMuPDF&lt;/h3>
&lt;p>&lt;strong>文档地址：&lt;/strong> &lt;a href="https://pymupdf.readthedocs.io/en/latest/tutorial.html">https://pymupdf.readthedocs.io/en/latest/tutorial.html&lt;/a>&lt;/p>
&lt;p>&lt;strong>简介：&lt;/strong> 高性能python库，用于PDF的数据提取、分析、转换和操作。&lt;/p>
&lt;p>PyMuPDF Pro还支持 office文件的支持，包括：&lt;/p>
&lt;ul>
&lt;li>DOC/DOCX 文档/文档CX&lt;/li>
&lt;li>PPT/PPTX&lt;/li>
&lt;li>XLS/XLSX&lt;/li>
&lt;li>HWP/HWPX&lt;/li>
&lt;/ul>
&lt;p>模块基础单元为Document实例，用户可以通过PyMuPDF打开文件，获取Document实例。Document包含许多属性和功能。其中包括元信息（如“作者”或“主题”）、总页数、大纲和加密信息。&lt;/p>
&lt;p>页面处理是PyMuPDF功能的核心，用户可以通过Document作为Page的迭代器，通过循环获取不同的Page。&lt;/p>
&lt;p>用户可以通过不同形式和详细程度提取页面的所有文本、图像和其他信息。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>text &lt;span style="color:#f92672">=&lt;/span> page&lt;span style="color:#f92672">.&lt;/span>get_text(opt)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用一下option选项获取不同的格式：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>“text”&lt;/strong> ：（默认）带有换行符的纯文本。没有格式、没有文本位置详细信息、没有图像。&lt;/li>
&lt;li>&lt;strong>“blocks”&lt;/strong> ：生成文本块（=段落）列表。&lt;/li>
&lt;li>&lt;strong>“words”&lt;/strong> ：生成单词列表（不包含空格的字符串）。&lt;/li>
&lt;li>&lt;strong>“html”&lt;/strong> ：创建页面的完整视觉版本，包括任何图像。这可以通过您的互联网浏览器显示。&lt;/li>
&lt;li>&lt;strong>“dict”&lt;/strong> / &lt;strong>“json”&lt;/strong> ：与 HTML 相同的信息级别，但以 Python 字典或 resp 形式提供。 JSON 字符串。有关其结构的详细信息，请参阅&lt;a href="https://pymupdf.readthedocs.io/en/latest/textpage.html#TextPage.extractDICT">&lt;code>TextPage.extractDICT()&lt;/code>&lt;/a> 。&lt;/li>
&lt;li>&lt;strong>“rawdict”&lt;/strong> / &lt;strong>“rawjson”&lt;/strong> ： &lt;strong>“dict”&lt;/strong> / **“json”**的超集。它还提供诸如 XML 之类的字符详细信息。有关其结构的详细信息，请参阅&lt;a href="https://pymupdf.readthedocs.io/en/latest/textpage.html#TextPage.extractRAWDICT">&lt;code>TextPage.extractRAWDICT()&lt;/code>&lt;/a> 。&lt;/li>
&lt;li>&lt;strong>“xhtml”&lt;/strong> ：文本信息级别为TEXT版本，但包含图像。也可以通过互联网浏览器显示。&lt;/li>
&lt;li>&lt;strong>“xml”&lt;/strong> ：不包含图像，但包含完整的位置和字体信息，具体到每个文本字符。使用 XML 模块进行解释。&lt;/li>
&lt;/ul>
&lt;p>PyMuPDF支持使用story类通过html源生成PDF，并用于解析。然而并不提供直接通过Stroy实例转换成Document实例的方法。story类相关文档：https://pymupdf.readthedocs.io/en/latest/recipes-stories.html#stories&lt;/p>
&lt;p>&lt;strong>测试结果：&lt;/strong> 根据PDF的单页作为内容操作的基本单位，保留文件结构，并提供文件大纲进行标题区分，可以通过大纲和文本内容区分相关结构，以下为测试结果&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>doc&lt;span style="color:#f92672">.&lt;/span>get_toc() &lt;span style="color:#75715e"># 获取Document的大纲信息&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%203.png" alt="Untitled">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pymupdf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>content &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>doc &lt;span style="color:#f92672">=&lt;/span> pymupdf&lt;span style="color:#f92672">.&lt;/span>open(&lt;span style="color:#e6db74">&amp;#34;./pdf_test/test.pdf&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> page &lt;span style="color:#f92672">in&lt;/span> doc:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text &lt;span style="color:#f92672">=&lt;/span> page&lt;span style="color:#f92672">.&lt;/span>get_text()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content &lt;span style="color:#f92672">+=&lt;/span> text
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;./pdf_test/pymupdf.txt&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(content)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%204.png" alt="Untitled">&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%205.png" alt="Untitled">&lt;/p>
&lt;h3 id="pypdfium2">pypdfium2&lt;/h3>
&lt;p>&lt;strong>文档地址：&lt;/strong> &lt;a href="https://github.com/pypdfium2-team/pypdfium2">https://github.com/pypdfium2-team/pypdfium2&lt;/a>&lt;/p>
&lt;p>&lt;strong>简介：&lt;/strong> pypdfium2是与PDFium绑定的ABI 级Python 3，PDFium 是一个功能强大且经过自由许可的库，用于 PDF 渲染、检查、操作和创建。&lt;/p>
&lt;p>&lt;strong>测试结果：&lt;/strong> 与PyMuPDF类似，通过Document以及Page来实现页面文本信息的获取，也支持获取文件大纲用于判断文档标题，文本内容在获取时会丢失相关层级结构&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pypdfium2 &lt;span style="color:#66d9ef">as&lt;/span> pdfium
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pdf &lt;span style="color:#f92672">=&lt;/span> pdfium&lt;span style="color:#f92672">.&lt;/span>PdfDocument(&lt;span style="color:#e6db74">&amp;#34;./pdf_test/test.pdf&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> item &lt;span style="color:#f92672">in&lt;/span> pdf&lt;span style="color:#f92672">.&lt;/span>get_toc():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;*&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> item&lt;span style="color:#f92672">.&lt;/span>n_kids &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> item&lt;span style="color:#f92672">.&lt;/span>is_closed &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#e6db74">&amp;#34;+&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;?&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> item&lt;span style="color:#f92672">.&lt;/span>page_index &lt;span style="color:#f92672">is&lt;/span> &lt;span style="color:#66d9ef">None&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> item&lt;span style="color:#f92672">.&lt;/span>page_index &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">*&lt;/span> item&lt;span style="color:#f92672">.&lt;/span>level
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;[&lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">] &lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74"> -&amp;gt; &lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74"> # &lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74"> &lt;/span>&lt;span style="color:#e6db74">%s&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">%&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> item&lt;span style="color:#f92672">.&lt;/span>title,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> target,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> item&lt;span style="color:#f92672">.&lt;/span>view_mode,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> item&lt;span style="color:#f92672">.&lt;/span>view_pos,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(list(pdf&lt;span style="color:#f92672">.&lt;/span>get_toc()))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%206.png" alt="Untitled">&lt;/p>
&lt;p>可以展示PDF文件的层级结构&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> pypdfium2 &lt;span style="color:#66d9ef">as&lt;/span> pdfium
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pdf &lt;span style="color:#f92672">=&lt;/span> pdfium&lt;span style="color:#f92672">.&lt;/span>PdfDocument(&lt;span style="color:#e6db74">&amp;#34;./pdf_test/test.pdf&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>content &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> page &lt;span style="color:#f92672">in&lt;/span> pdf:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> textpage &lt;span style="color:#f92672">=&lt;/span> page&lt;span style="color:#f92672">.&lt;/span>get_textpage()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text_all &lt;span style="color:#f92672">=&lt;/span> textpage&lt;span style="color:#f92672">.&lt;/span>get_text_range()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> print(text_all)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> content &lt;span style="color:#f92672">+=&lt;/span> text_all
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">with&lt;/span> open(&lt;span style="color:#e6db74">&amp;#34;pdf_test/pypdfium2.txt&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;w&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> f:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> f&lt;span style="color:#f92672">.&lt;/span>write(content)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%207.png" alt="Untitled">&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%208.png" alt="Untitled">&lt;/p>
&lt;p>文本提取不如PyMuPDF结构，不过依旧可以通过大纲和标题获取文件内容的层级结构。&lt;/p>
&lt;h3 id="mineru">MinerU&lt;/h3>
&lt;p>文档地址：https://github.com/VikParuchuri/marker&lt;/p>
&lt;p>&lt;strong>简介：&lt;/strong> 是一款一站式、开源、高质量的数据提取工具，主要提供以下主要功能：&lt;/p>
&lt;ul>
&lt;li>Magic-PDF：是一款旨在将PDF文档转换为Markdown格式的工具，能够处理本地存储或支持S3协议的对象存储上的文件。
&lt;ul>
&lt;li>支持多种前端模型输入&lt;/li>
&lt;li>删除页眉、页脚、脚注和页码&lt;/li>
&lt;li>人类可读的布局格式&lt;/li>
&lt;li>保留原始文档的结构和格式，包括标题、段落、列表等&lt;/li>
&lt;li>Markdown 图像和表格的提取和显示&lt;/li>
&lt;li>自动检测并转换PDF乱码&lt;/li>
&lt;li>将方程转换为 LaTeX 格式&lt;/li>
&lt;li>与CPU和GPU环境的兼容性&lt;/li>
&lt;li>适用于 Windows、Linux 和 macOS 平台&lt;/li>
&lt;li>基于PDF-Extract-Kit作为PDF内容提取的工具&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Magic-Doc：是一款旨在将网页或多格式电子书转换为Markdown格式的工具。
&lt;ul>
&lt;li>网页提取：文本、图像、表格、公式信息的跨模态精准解析。&lt;/li>
&lt;li>电子书文档提取：支持epub、mobi等多种文档格式，文本、图片全面适配。&lt;/li>
&lt;li>语言类型识别：准确识别176种语言。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>本文主要记录Magic-PDF对于PDF解析效果，Magic-PDF基于PDF-Extract-Kit进行PDF内容提取，因此需要下载PaddleOcr和其自定义训练的模型。模型大小约5G左右。&lt;/p>
&lt;p>&lt;strong>测试结果：&lt;/strong> 由于Magic-PDF模块安装复杂，因此使用命令行形式进行测试&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>magic&lt;span style="color:#f92672">-&lt;/span>pdf pdf&lt;span style="color:#f92672">-&lt;/span>command &lt;span style="color:#f92672">--&lt;/span>pdf &lt;span style="color:#e6db74">&amp;#34;pdf_path/test.pdf&amp;#34;&lt;/span> &lt;span style="color:#f92672">--&lt;/span>inside_model true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>成功执行后，会在设定好的temp-output-dir目录下生成magic-pdf文件夹。每单次执行会在此目录下生成一个文件夹内部包含解析文件&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%209.png" alt="Untitled">&lt;/p>
&lt;p>layout.pdf和spans.pdf代表源PDF文件的内部元素的布局和宽度&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%2010.png" alt="Untitled">&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%2011.png" alt="Untitled">&lt;/p>
&lt;p>后缀为md的文件代表其生成的Markdown文件：&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%2012.png" alt="Untitled">&lt;/p>
&lt;p>后缀为json的文件代表各个元素的各类信息。&lt;/p>
&lt;p>通过与源文件对比，可发现存在部分元素提取异常，元素结构提取错误。标题格式误识别率较高。如下图”DNS解析流程“应该为正文内容，这里却将它识别成了标题。&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/Untitled%2013.png" alt="Untitled">&lt;/p>
&lt;h3 id="marker">marker&lt;/h3>
&lt;p>&lt;strong>文档地址：&lt;/strong> &lt;a href="https://github.com/VikParuchuri/marker">https://github.com/VikParuchuri/marker&lt;/a>&lt;/p>
&lt;p>&lt;strong>简介：&lt;/strong> 快速准确地将 PDF 转换为 Markdown。&lt;/p>
&lt;ul>
&lt;li>支持多种文档（针对书籍和科学论文进行了优化）&lt;/li>
&lt;li>支持所有语言&lt;/li>
&lt;li>清除页眉/页脚/其他杂物&lt;/li>
&lt;li>格式化表格和代码块&lt;/li>
&lt;li>提取并保存图像以及相应的 markdown&lt;/li>
&lt;li>将大多数方程转换为 latex&lt;/li>
&lt;li>可在 GPU、CPU 或 MPS 上运行&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>测试结果：通过 &lt;code>convert_single_pdf&lt;/code>方法直接获取整页PDF的文本信息，可以提取部分文档层级结构，可以提取代码、表格、公式，页眉页脚未能正确去除。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> marker.convert &lt;span style="color:#f92672">import&lt;/span> convert_single_pdf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> marker.models &lt;span style="color:#f92672">import&lt;/span> load_all_models
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>full_text, images, out_meta &lt;span style="color:#f92672">=&lt;/span> convert_single_pdf(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;./test2.pdf&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> load_all_models(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> langs&lt;span style="color:#f92672">=&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;Chinese&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;English&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> batch_multiplier&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(full_text)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(images)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>print(out_meta)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/image.png" alt="image.png">&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/image%201.png" alt="image.png">&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/image%202.png" alt="image.png">&lt;/p>
&lt;pre>&lt;code> 部分层级结构保留
&lt;/code>&lt;/pre>
&lt;p>如下，部分文本应为正文，但却被识别成标题结构。&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/image%203.png" alt="image.png">&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/image%204.png" alt="image.png">&lt;/p>
&lt;p>实际测试中，页眉页脚未能正确去除&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/image%205.png" alt="image.png">&lt;/p>
&lt;pre>&lt;code> 页眉页脚未能去除
&lt;/code>&lt;/pre>
&lt;p>需要从 huggingface 导入 6 个模型，显存要求较高，测试时出现爆显存现象&lt;/p>
&lt;p>&lt;code>model_lst = [texify, layout, order, edit, detection, ocr]&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://proseguys.github.io/images/pdf_extractor_report/image%206.png" alt="image.png">&lt;/p>
&lt;h2 id="小结">小结：&lt;/h2>
&lt;p>在以上模块中，如果只需要获取PDF文本信息的前提下，PyMuPDF模块的效果最好，文本提取准确，提供大纲方法获取文本标题，从而分析得出文本结构。&lt;/p>
&lt;p>若需要PDF转成Markdown格式，可以使用MinerU模块，不过当前存在模块内部依赖混乱，外部调用API不完善等问题&lt;/p></description></item></channel></rss>